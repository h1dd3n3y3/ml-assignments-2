--------------------------------------------- Περιεχόμενα αρχείου txt -----------------------------------------------------
Μάθημα: Υπολογιστική Νοημοσύνη και Μηχανική Μάθηση

Α/Α Ομάδας: 50

Μέλη Ομάδας: Δαυίδ Παναγιώτης Παραθυράς, Δημοσθένης Κράλλης, Δημήτρης Κόκκαλης.

Ομάδα Θεμάτων: 3η

Συνεισφορά Μελών Ομάδας: Ερώτημα Α -> Δημοσθένης Κράλλης, Δημήτρης Κόκκαλης, Ερώτημα Β -> Δαυίδ Παναγιώτης Παραθυράς.
1ο Μέλος: Δαυίδ Παναγιώτης Παραθυράς, ΑΜ: 2119200
2ο Μέλος: Δημοσθένης Κράλλης, ΑΜ: 2120231
3ο Μέλος: Δημήτρης Κόκκαλης, ΑΜ: 2120273
------------
Ερώτημα Α.
Σύντομη Περιγραφή: 
    Ο παρακάτω κώδικας υλοποιεί Fuzzy logic, λαμβάνοντας τους βαθμούς φοιτητών σε 3 μαθήματα, για την μετέπειτα κατηγοριοποίηση βάσει των γνώσεών τους.
    Φορτώνοντας τις απαραίτητες βιβλιοθήκες (numpy, csv, skfuzzy) και καποιούς επανορισμούς για διευκόλυνσή μας (τους προγραμματιστές),
    ξεκινάμε το πρόγραμμα. Αρχικά διαβάζουμε το csv, διαμορφώνουμε και καθαριζουμε τα δεδομενα που θελουμε για την περιπτωση μας, απο τα υπολοιπα
    (στη περίπτωσή μας, μόνο τους βαθμούς των μαθητών).
    Έπειτα θέτουμε τα όρια για τις τιμές των βαθμών των κλάσεων (δηλαδή των Antecedent και της Consequent) και φτιάχνουμε τριγωνικές membership funtions
    για την κλασικοποίηση σε "κακός", "καλός" και "κάλλιστος" ως προς τους βαθμούς για τα αντίστοιχα μαθήματα και το τελικό αποτέλεσμα. Προβάλουμε τις
    μορφές των membership functions και Θέτουμε κανόνες στους φοιτητές ώστε εάν σε 2 είναι καλά π.χ είναι κάλος κ.π.λ. Ύστερα, εδραιώνουμε τους κανόνες
    στον ελεγκτή και βάζουμε έναν μοναδικό δείκτη για διαφοροποίηση των μαθητών.
    Τέλος, σε έναν βρόγχο, εισάγουμε τα δεδομένα μέσα στο controller και εκτυπώνουμε τα δεδομένα και τα ποσοστά ανα κλάση.

    Προτείνεται η εκτέλεση σε spyder για πιό ομαλή λειτουργία με τα γραφήματα. Παρακαλώ σχολιάστε τις γραμμές 113, 114, 115, 116 και 146 (τελευταία)
    για να τρέξετε το πρόγραμμα χωρίς τα γραφήματα.

Dataset: source.csv (StudentsPerformance.csv) Link: https://www.kaggle.com/datasets/spscientist/students-performance-in-exams
Κώδικας:

# FUZZY LOGIC
# Παρατηρήθηκε η χρήση του συνδέσμου  https://pythonhosted.org/scikit-fuzzy/auto_examples/plot_tipping_problem_newapi.html
# για τις πληροφορίες του αρχικού sample κώδικα που μας παρέχει το εργαστήριο.

# Παρακάτω αναγράφονται τα 10/1000 entries του dataset, για εξοικονόμηση χώρου.
'''
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 0 για τα αντίστοιχα μαθήματα: 72 | 72 | 74
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.8256187895212288 | 0.0 
Το κέντρο βάρους: 64.76856368563686
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 1 για τα αντίστοιχα μαθήματα: 69 | 90 | 88
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.0 | 0.6108333333333339 
Το κέντρο βάρους: 88.32500000000002
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 2 για τα αντίστοιχα μαθήματα: 90 | 95 | 93
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.0 | 0.6330158730158719 
Το κέντρο βάρους: 88.99047619047616
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 3 για τα αντίστοιχα μαθήματα: 47 | 57 | 44
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.3928583240077375 | 0.0 
Το κέντρο βάρους: 51.785749720232126
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 4 για τα αντίστοιχα μαθήματα: 76 | 78 | 75
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.9433201058201074 | 0.0 
Το κέντρο βάρους: 68.29960317460322
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 5 για τα αντίστοιχα μαθήματα: 71 | 83 | 78
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.7056140350877299 | 0.09812865497075668 
Το κέντρο βάρους: 72.9438596491227
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 6 για τα αντίστοιχα μαθήματα: 88 | 95 | 92
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.0 | 0.629320987654322 
Το κέντρο βάρους: 88.87962962962966
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 7 για τα αντίστοιχα μαθήματα: 40 | 43 | 39
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.5481481481481483 | 0.0 | 0.0 
Το κέντρο βάρους: 22.592592592592588
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 8 για τα αντίστοιχα μαθήματα: 64 | 64 | 67
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.77037037037037 | 0.0 
Το κέντρο βάρους: 63.1111111111111
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Οι βαθμοί του μαθητή 9 για τα αντίστοιχα μαθήματα: 38 | 60 | 50
Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: 0.0 | 0.718518518518518 | 0.0 
Το κέντρο βάρους: 61.55555555555554
----------------------------------------------------------------------------------------
'''

import numpy as np
import csv
import skfuzzy as fuzz
from skfuzzy import control as ctrl

def safe_csv_read(csvstring):            #from python docs: https://docs.python.org/3/library/csv.html#examples
    output=[]
    with open(csvstring, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            output.append(row)
    return output


# Επεξεργασία των δεδομένων

data=safe_csv_read('source.csv')
#print(data[0])
data.pop(0)         # Πετάμε τα ονόματα
                    # Το dataset έχει μαθητές διάφορων κατηγοριών πτυχίων, φύλου, εθνικότητας,τύπος μεσημεριανού
                    # και πόσο προετοιμάστηκε για τις εξετάσεις. Θα χρησιμοποιήσουμε μόνο τους βαθμούς από τα 3
                    # μαθήματα. Έτσι θα βγάλουμε τις άλλες πληροφορίες από το dataset.
#print(data[0])
data=np.array(data)
data=data[:,5:]
data=data.astype(np.int32)      # Επιλέγουμε τους αριθμούς και τους μετατρέπουμε σε integers καθώς τους θεωρεί 
                                # strings η numpy. Επίσης χρησιμοποιούμε numpy για το 2D list slicing
#print(data[0])


math = ctrl.Antecedent(np.arange(0, 100, 1), 'math_score')              # Είναι οι τιμές μεγιστες και ελάχιστες των βαθμών
reading = ctrl.Antecedent(np.arange(0, 100, 1), 'reading_score')
writing = ctrl.Antecedent(np.arange(0, 100, 1), 'writing_score')
overall = ctrl.Consequent(np.arange(0, 100, 1), 'overall_score')

math['bad'] = fuzz.trimf(math.universe, [0, 0, 50])     #Οι τριγωνικές που έχουμε είναι αρκετά καλές (TRIangular Membership Function generator)
math['good'] = fuzz.trimf(math.universe, [40, 70, 80])
math['great'] = fuzz.trimf(math.universe, [70, 100, 100])

reading['bad'] = fuzz.trimf(reading.universe, [0, 0, 50])
reading['good'] = fuzz.trimf(reading.universe, [40, 70, 80])
reading['great'] = fuzz.trimf(reading.universe, [70, 100, 100])

writing['bad'] = fuzz.trimf(writing.universe, [0, 0, 50])
writing['good'] = fuzz.trimf(writing.universe, [40, 70, 80])
writing['great'] = fuzz.trimf(writing.universe, [70, 100, 100])

overall['bad'] = fuzz.trimf(overall.universe, [0, 0, 50])
overall['good'] = fuzz.trimf(overall.universe, [40, 70, 80])
overall['great'] = fuzz.trimf(overall.universe, [70, 100, 100])

# Προβολή των plot των membership function
math.view()
reading.view()
writing.view()
overall.view()

# Κανόνες του fuzzy controller
# Θέλουμε όταν είναι 2 από τις 3 κατηγορίες να παίρνει αυτή την κατηγορία ο μαθητής.
rule1 = ctrl.Rule(math['bad'] & reading['bad'] | math['bad'] & writing['bad'] | writing['bad'] & reading['bad'] , overall['bad'])
rule2 = ctrl.Rule(math['good'] & reading['good'] | math['good'] & writing['good'] | writing['good'] & reading['good'] , overall['good'])
rule3 = ctrl.Rule(math['great'] & reading['great'] | math['great'] & writing['great'] | writing['great'] & reading['great'] , overall['great'])

# Ρίχνουμε τους κανόνες μας στην βιβλιοθήκη (στο controler)
result_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])

student_id=0    # Ένας μετρητής για να ξέρουμε το index του μαθητή.

for i in data:
    print("----------------------------------------------------------------------------------------")
    print("Οι βαθμοί του μαθητή {} για τα αντίστοιχα μαθήματα: {} | {} | {}".format(student_id, i[0], i[1], i[2]))
    result = ctrl.ControlSystemSimulation(result_ctrl)
    result.input['math_score'] = i[0]
    result.input['reading_score'] = i[1]
    result.input['writing_score'] = i[2]
    # Εδώ γίνεται ο υπολογισμός
    result.compute()
    
    isBad=fuzz.interp_membership(overall.universe, overall['bad'].mf, result.output['overall_score'])   # Μπορούσε να βγεί από το documentation αλλά το πήρα από εδώ: https://stackoverflow.com/questions/73373581/skfuzzy-get-membership-value-from-output
    isGood=fuzz.interp_membership(overall.universe, overall['good'].mf, result.output['overall_score'])
    isGreat=fuzz.interp_membership(overall.universe, overall['great'].mf, result.output['overall_score'])
    print("Ποσοστό ύπαρξης μέσα στις κατηγορίες bad, good, great αντίστοιχα: {} | {} | {} ".format(isBad, isGood, isGreat))
    print ("Το κέντρο βάρους: {}".format(result.output['overall_score']))
    print("----------------------------------------------------------------------------------------")
    student_id=student_id+1
    overall.view(sim=result)
------------
Ερώτημα Β.
Σύντομη Περιγραφή:
    Το παρακάτω πρόγραμμα, χρησιμοποιεί τον αλγόριθμο PSO (Particle Swarm Optimization) για να επιλύσει το Πρόβλημα του Σακιδίου, βρίσκοντας τον καλύτερο
    συνδυασμό αντικειμένων, με στόχο τη μεγιστοποίηση της συνολικής αξίας, τηρώντας τον περιορισμό του μέγιστου βάρους και χρησιμοποιώντας τυχαιότητα.
    
    Η συνάρτηση create_particle() δημιουργεί σωματίδια για τον αλγόριθμο PSO, τα οποία αποτελούνται από θέση, ταχύτητα και βέλτιστη θέση. Η θέση, αποτελεί
    δυαδικό πίνακα που αντιπροσωπεύει την παρουσία ή απουσία των στοιχείων στο σακίδιο. Η αρχική ταχύτητα είναι 0 και η βέλτιστη θέση αρχικοποιημένη με την
    τρέχουσα θέση.
    Η συνάρτηση update_particle_velocity() ενημερώνει την ταχύτητα του κάθε σωματιδίου σύμφωνα με την τρέχουσα θέση, βέλτιστη θέση και την συνολικά βέλτιστη
    θέση πού βρέθηκε μέχρι εκείνη τη στιγμή. Υπολογίζει τη «γνωστική» ταχύτητα και «κοινωνική» ταχύτητα (cognitive & social velocity), χρησιμοποιώντας τυχαίες
    τιμές αριθμών και βαρών. Η ταχύτητα ενημερώνεται από τον συνδυασμό αυτών, μαζί με το βάρος αδράνειας (inertia weight).
    Η συνάρτηση update_particle_position() ενημερώνει την θέση του σωματιδίου βάσει της ταχύτητάς του. Χρησιμοποιεί μία σιγμοειδή συνάρτηση, για να καταλάβει
    αν κάθε στοιχείο του πίνακα της ταχύτητας θα ανήκει στο σακίδιο ή όχι.
    Η συνάρτηση sigmoid() υλοποιεί τη σιγμοειδή συνάρτηση η οποία αντιστοιχίζει την τιμή εισόδου μεταξύ 0 και 1, χρησιμοποιώντας τη σταθερά του Euler.
    Η συνάρτηση evaluate_fitness() υπολογίζει το ταίριασμα της θέσης του κάθε σωματιδίου. Αθροίζει τις τιμές και τα βάρη των επιλεγμένων στοιχείων και ελέγχει
    αν το συνολικό βάρος υπερβαίνει το μέγιστο βάρος που επιτρέπεται. Αν δεν είναι στα όρια του συνολικού βάρους, τότε επιστρέφεται η τιμή 0.
    Η συνάρτηση update_global_best_position() ενημερώνει η συνολική βέλτιστη θέση συγκρίνοντας το ταίριασμα κάθε σωματιδίου με το βέλτιστο ταίριασμα που έχει
    βρεθεί την στιγμή που τρέχει το πρόγραμμα. Αν βρεθεί μεγαλύτερη τιμή ταιριάσματος σωματιδίου, η θέση του γίνεται νέα συνολική βέλτιστη θέση.
    Η συνάρτηση run_pso() αρχικοποιεί τα σωματίδια και τον αριθμό, την αξία και το βάρος των στοιχείων, για δοσμένο αριθμό επαναλήψεων. Επιστρέφει το καλύτερο
    αποτέλεσμα που βρέθηκε από την εκτέλεση του κώδικα, συνολικά.

    Οι τιμές του αριθμού σωματιδίων, των μεγίστων αριθμών αναλήψεων (καθώς και οι αριθμοί των στοιχείων και του μέγιστου βάρους), είναι εμπειρικές και βγήκαν μέσα
    από δοκιμές του κώδικα, έτσι ώστε κάθε φορά που τρέχει να μην αλλάζει συχνά το αποτέλεσμα, παρά τη χρήση τυχαιότητας.

Κώδικας:
# Run result for given input:
'''
Enter number of items: 10
Enter value for item 1: 60
Enter weight for item 1: 10
Enter value for item 2: 100
Enter weight for item 2: 20
Enter value for item 3: 120
Enter weight for item 3: 30
Enter value for item 4: 140
Enter weight for item 4: 40
Enter value for item 5: 160
Enter weight for item 5: 50
Enter value for item 6: 180
Enter weight for item 6: 10
Enter value for item 7: 200
Enter weight for item 7: 20
Enter value for item 8: 220
Enter weight for item 8: 30
Enter value for item 9: 240
Enter weight for item 9: 40
Enter value for item 10: 260
Enter weight for item 10: 50
Best solution: [0, 1, 0, 0, 0, 1, 1, 0, 0, 0]
'''

import random

def create_particle(num_items): # Create particle
    position = [random.randint(0, 1) for _ in range(num_items)]
    velocity = [0] * num_items
    best_position = position.copy()

    return position, velocity, best_position

def update_particle_velocity(particle, best_position, global_best_position): # Update particle velocity
    inertia_weight = 0.3  # Inertia weight
    cognitive_weight = 1.4 # Cognitive weight
    social_weight = 1.4 # Social weight

    for i in range(len(particle[0])): # For each item
        r1 = random.random() # Random number between 0 and 1
        r2 = random.random() # Random number between 0 and 1

        cognitive_velocity = cognitive_weight * r1 * (particle[2][i] - particle[0][i]) # Cognitive velocity
        social_velocity = social_weight * r2 * (global_best_position[i] - particle[0][i]) # Social velocity
        particle[1][i] = inertia_weight * particle[1][i] + cognitive_velocity + social_velocity # Update velocity

def update_particle_position(particle): # Update particle position
    for i in range(len(particle[0])): # For each item
        if random.random() < sigmoid(particle[1][i]): # If random number is less than sigmoid of velocity
            particle[0][i] = 1
        else:
            particle[0][i] = 0 

def sigmoid(x): # Sigmoid function for particle position update
    return 1 / (1 + pow(2.71828, -x)) # 2.71828 = Euler's number

def evaluate_fitness(position, items, max_weight): # Particle fitness evaluation
    total_value = 0 # Initialize total value to 0
    total_weight = 0 # Initialize total weight to 0

    for i in range(len(position)): # For each item
        if position[i] == 1: # If item is in the knapsack
            total_value += items[i][0] # Add item's value to total value
            total_weight += items[i][1] # Add item's weight to total weight

    if total_weight > max_weight: # If total weight exceeds maximum weight
        return 0 
    else: # Else
        return total_value

def update_global_best_position(particles, items, max_weight): # Update global best position
    global_best_position = [0] * len(particles[0][0]) # Initialize global best position to 0
    best_fitness = evaluate_fitness(particles[0][0], items, max_weight) # Initialize best fitness to first particle's fitness

    for particle in particles: # For each particle
        fitness = evaluate_fitness(particle[0], items, max_weight) # Evaluate fitness
        
        if fitness > best_fitness:  # If fitness is better than best fitness
            best_fitness = fitness  # Update best fitness
            global_best_position = particle[0].copy() # Update global best position

    return global_best_position

def run_pso(num_particles, num_items, max_weight, items, max_iterations): # Run PSO function
    particles = [create_particle(num_items) for _ in range(num_particles)] # Create particles
    global_best_position = update_global_best_position(particles, items, max_weight) # Initialize global best position

    for i in range(max_iterations): # In range of maximum iterations
        for particle in particles: # For each particle
            update_particle_velocity(particle, particle[2], global_best_position) # Update particle velocity
            update_particle_position(particle) # Update particle position

        global_best_position = update_global_best_position(particles, items, max_weight) # Update global best position

    return global_best_position

'''
Ready example (uncomment this and comment lines 113-122 to run):

num_particles = 750
num_items = 10
max_weight = 50
max_iterations = 100
items = [
    [60, 10], [100, 20], [120, 30], [140, 40], [160, 50],
    [180, 10], [200, 20], [220, 30], [240, 40], [260, 50]
]
'''

num_particles = 750 # Number of particles
num_items = int(input("Enter number of items: ")) # Prompt user for number of items
max_weight = int(input("Enter maximum weight: ")) # Prompt user for maximum weight
max_iterations = 100 # Maximum iterations
items = []

for i in range(num_items): # For each item
    value = int(input(f"Enter value for item {i+1}: ")) # Prompt user for item value
    weight = int(input(f"Enter weight for item {i+1}: ")) # Prompt user for item weight
    items.append([value, weight]) # Append item to items list

solution = run_pso(num_particles, num_items, max_weight, items, max_iterations) # Run PSO function
print("Best solution:", solution)

--------------------------------------------- Τέλος περιεχομένων του αρχείου txt -----------------------------------------------------
